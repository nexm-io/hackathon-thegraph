type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExcludeFromDividendProcessing @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  isExcluded: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExcludeFromFees @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  isExcluded: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExcludeMultipleAccountsFromFees @entity(immutable: true) {
  id: Bytes!
  accounts: [Bytes!]! # address[]
  isExcluded: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FailToSend @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GasForProcessingUpdated @entity(immutable: true) {
  id: Bytes!
  newValue: BigInt! # uint256
  oldValue: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LiquidityWalletUpdated @entity(immutable: true) {
  id: Bytes!
  newLiquidityWallet: Bytes! # address
  oldLiquidityWallet: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProcessedDividendTracker @entity(immutable: true) {
  id: Bytes!
  iterations: BigInt! # uint256
  claims: BigInt! # uint256
  lastProcessedIndex: BigInt! # uint256
  automatic: Boolean! # bool
  gas: BigInt! # uint256
  processor: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SendDividends @entity(immutable: true) {
  id: Bytes!
  tokensSwapped: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetAutomatedMarketMakerPair @entity(immutable: true) {
  id: Bytes!
  pair: Bytes! # address
  value: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SwapAndLiquify @entity(immutable: true) {
  id: Bytes!
  tokensSwapped: BigInt! # uint256
  ethReceived: BigInt! # uint256
  tokensIntoLiqudity: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateDividendTracker @entity(immutable: true) {
  id: Bytes!
  newAddress: Bytes! # address
  oldAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateUniswapV2Router @entity(immutable: true) {
  id: Bytes!
  newAddress: Bytes! # address
  oldAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
